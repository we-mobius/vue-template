{
  /*************************************************************************************************************
   *                                                  Compiler Options
   *************************************************************************************************************/
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */
    /* Fully compatible with @vue/tsconfig, see https://vuejs.org/guide/typescript/overview.html#configuring-tsconfig-json */

    /*************************************************************************************************************
     *                                                   Type Checking
     *************************************************************************************************************/
    "allowUnreachableCode": false,                      /* Disable error reporting for unreachable code. */
    "allowUnusedLabels": false,                         /* Disable error reporting for unused labels. */
    "alwaysStrict": true,                               /* Ensure 'use strict' is always emitted. */
    "exactOptionalPropertyTypes": true,                 /* Differentiate between undefined and not present when type checking */
    "noFallthroughCasesInSwitch": false,                /* Enable error reporting for fallthrough cases in switch statements. */
    "noImplicitAny": true,                              /* Enable error reporting for expressions and declarations with an implied any type. */
    "noImplicitOverride": true,                         /* Ensure overriding members in derived classes are marked with an override modifier. */
    "noImplicitReturns": true,                          /* Enable error reporting for codepaths that do not explicitly return in a function. */
    "noImplicitThis": true,                             /* Enable error reporting when this is given the type any. */
    "noPropertyAccessFromIndexSignature": true,         /* Enforces using indexed accessors for keys declared using an indexed type */
    "noUncheckedIndexedAccess": true,                   /* Add undefined to a type when accessed using an index. */
    "noUnusedLocals": false,                            /* Enable error reporting when a local variables aren't read. */
    "noUnusedParameters": false,                        /* Raise an error when a function parameter isn't read */
    "strict": true,                                     /* Enable all strict type checking options. */
    "strictBindCallApply": true,                        /* Check that the arguments for bind, call, and apply methods match the original function. */
    "strictFunctionTypes": true,                        /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    "strictNullChecks": true,                           /* When type checking, take into account null and undefined. */
    "strictPropertyInitialization": true,               /* Check for class properties that are declared but not set in the constructor. */
    "useUnknownInCatchVariables": true,                 /* Default catch clause variables as unknown instead of any. */

    /*************************************************************************************************************
     *                                                   Modules
     *************************************************************************************************************/
    "allowUmdGlobalAccess": true,                        /* Allow accessing UMD globals from modules. */
    "baseUrl": ".",                                      /* Specify the base directory to resolve non-relative module names. */
    "module": "ESNext",                                  /* Specify what module code is generated. */
    "moduleResolution": "Node",                          /* Specify how TypeScript looks up a file from a given module specifier. */
    "moduleSuffixes": [""],                              /* Provides a way to override the default list of file name suffixes to search when resolving a module. */
    "noResolve": false,                                  /* Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project. */
    "paths": {
      "@/*": [
        "./*"
      ],
      "Src/*": [
        "./src/*"
      ],
      "Statics/*": [
        "./src/statics/*"
      ],
      "Styles/*": [
        "./src/statics/styles/*"
      ],
      "Images/*": [
        "./src/statics/images/*"
      ],
      "Elements/*": [
        "./src/elements/*"
      ],
      "Components/*": [
        "./src/components/*"
      ],
      "Views/*": [
        "./src/views/*"
      ],
      "Services/*": [
        "./src/services/*"
      ]
    },                                                   /* Specify a set of entries that re-map imports to additional lookup locations. */
    "resolveJsonModule": true,                           /* Enable importing .json files */
    "rootDir": "./src",                                  /* Specify the root folder within your source files. */
    "rootDirs": [],                                      /* Allow multiple folders to be treated as one when resolving modules. */
    "typeRoots": [],                                     /* Specify multiple folders that act like `./node_modules/@types`. */
    "types": [],                                         /* Specify type package names to be included without being referenced in a source file. */

    /*************************************************************************************************************
     *                                                     Emit
     *************************************************************************************************************/
    "declaration": true,                                 /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    "declarationDir": "./.mobius/.temp/typings",         /* Specify the output directory for generated declaration files. */
    "declarationMap": true,                              /* Create sourcemaps for d.ts files. */
    "downlevelIteration": true,                          /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    "emitBOM": false,                                    /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    "emitDeclarationOnly": false,                        /* Only output d.ts files and not JavaScript files. */
    "importHelpers": true,                               /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // Enforce using `import type` instead of `import` for types
    "importsNotUsedAsValues": "error",                   /* Specify emit/checking behavior for imports that are only used for types */
    "inlineSourceMap": true,                             /* Include sourcemap files inside the emitted JavaScript. */
    "inlineSources": true,                               /* Include source code in the sourcemaps inside the emitted JavaScript. */
    "mapRoot": "",                                       /* Specify the location where debugger should locate map files instead of generated locations. */
    "newLine": "crlf",                                   /* Set the newline character for emitting files. */
    "noEmit": false,                                     /* Disable emitting files from a compilation. */
    "noEmitHelpers": false,                              /* Disable generating custom helper functions like `__extends` in compiled output. */
    "noEmitOnError": false,                              /* Disable emitting files if any type checking errors are reported. */
    "outDir": "./.mobius/.temp/transpiled",              /* Specify an output folder for all emitted files. */
    //  "outFile": "",                                       /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. */
    "preserveConstEnums": true,                          /* Disable erasing `const enum` declarations in generated code. */
    // For `<script setup>`
    // See <https://devblogs.microsoft.com/typescript/announcing-typescript-4-5-beta/#preserve-value-imports>
    "preserveValueImports": true,
    "removeComments": false,                             /* Disable emitting comments. */
    // "sourceMap": true,                                   /* Create source map files for emitted JavaScript files. */
    "sourceRoot": "",                                    /* Specify the root path for debuggers to find the reference source code. */
    "stripInternal": true,                               /* Disable emitting declarations that have `@internal` in their JSDoc comments. */

    /*************************************************************************************************************
     *                                                 JavaScript Support
     *************************************************************************************************************/
    "allowJs": true,                                     /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */
    "checkJs": true,                                     /* Enable error reporting in type-checked JavaScript files. */
    "maxNodeModuleJsDepth": 1,                           /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */

    /*************************************************************************************************************
     *                                                 Editor Support
     *************************************************************************************************************/
    "disableSizeLimit": true,
    "plugins": [],                                       /* List of language service plugins to run inside the editor. */

    /*************************************************************************************************************
     *                                                 Interop Constraints
     *************************************************************************************************************/
    "allowSyntheticDefaultImports": true,                /* Allow 'import x from y' when a module doesn't have a default export. */
    // Enabling esModuleInterop will also enable allowSyntheticDefaultImports.
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */
    // Required in Vite
    "isolatedModules": true,                             /* Ensure that each file can be safely transpiled without relying on other imports. */
    // NOTE: when working with pnpm, preserveSymlinks should be set to false.
    "preserveSymlinks": false,                           /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */

    /*************************************************************************************************************
     *                                                 Backwards Compatibility
     *************************************************************************************************************/
    "noImplicitUseStrict": false,                        /* Disable adding 'use strict' directives in emitted JavaScript files. */
    "noStrictGenericChecks": false,                      /* Disable strict checking of generic signatures in function types. */
    "suppressExcessPropertyErrors": false,               /* Disable reporting of excess property errors during the creation of object literals. */
    "suppressImplicitAnyIndexErrors": false,             /* Suppress noImplicitAny errors when indexing objects that lack index signatures. */

    /*************************************************************************************************************
     *                                           Language and Environment
     *************************************************************************************************************/
    "emitDecoratorMetadata": true,                        /* Emit design-type metadata for decorated declarations in source files. */
    "experimentalDecorators": true,                       /* Enable experimental support for TC39 stage 2 draft decorators. */
    // Required in Vue projects
    "jsx": "preserve",                                    /* Specify what JSX code is generated. */
    "jsxFactory": "React.createElement",                  /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' */
    "jsxFragmentFactory": "React.Fragment",               /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // NOTE: only enable when `jsx` is set to `react-jsx` or `react-jsxdev`.
    // "jsxImportSource": "react",                           /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */
    "lib": [
       "DOM",
       "DOM.Iterable",
       "ES2016"
     ],                                                   /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    "moduleDetection": "auto",
    "noLib": false,                                       /* Disable including any library files, including the default lib.d.ts. */
    // "reactNamespace": "React",                            /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */
    // A few notes:
    // - Vue 3 supports ES2016+
    // - For Vite, the actual compilation target is determined by the
    //   `build.target` option in the Vite config.
    //   So don't change the `target` field here. It has to be
    //   at least `ES2020` for dynamic `import()`s and `import.meta` to work correctly.
    // - If you are not using Vite, feel free to override the `target` field.
    "target": "ESNext",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "useDefineForClassFields": true,                     /* Emit ECMAScript-standard-compliant class fields. */

    /*************************************************************************************************************
     *                                                  Compiler Diagnostics
     *************************************************************************************************************/
    "explainFiles": false,
    "extendedDiagnostics": true,                         /* Output more detailed compiler performance information after building. */
    "generateCpuProfile": "./.mobius/.temp/profile.cpuprofile", /* Emit a v8 CPU profile of the compiler run for debugging. */
    "listEmittedFiles": false,                           /* Print the names of emitted files after a compilation. */
    "listFiles": false,                                  /* Print all of the files read during the compilation. */
    "traceResolution": false,                            /* Enable tracing of the name resolution process. Requires TypeScript version 2.0 or later. */

    /*************************************************************************************************************
     *                                                  Projects
     *************************************************************************************************************/
    "composite": true,                                   /* Enable constraints that allow a TypeScript project to be used with project references. */
    "disableReferencedProjectLoad": true,                /* Reduce the number of projects loaded automatically by TypeScript. */
    "disableSolutionSearching": false,                   /* Opt a project out of multi-project reference checking when editing. */
    "disableSourceOfProjectReferenceRedirect": false,    /* Disable preferring source files instead of declaration files when referencing composite projects */
    "incremental": true,                                 /* Enable incremental compilation */
    "tsBuildInfoFile": "./.mobius/.temp/.tsbuildinfo",   /* Specify the folder for .tsbuildinfo incremental compilation files. */

    /*************************************************************************************************************
     *                                                  Output Formatting
     *************************************************************************************************************/
    "noErrorTruncation": true,                           /* Disable truncating types in error messages. */
    "preserveWatchOutput": true,                         /* Disable wiping the console in watch mode */
    "pretty": true,                                      /* Enable color and formatting in output to make compiler errors easier to read */

    /*************************************************************************************************************
     *                                                  Completeness
     *************************************************************************************************************/
    // See <https://github.com/vuejs/vue-cli/pull/5688>
    "skipLibCheck": true,                                /* Skip type checking all .d.ts files. */

    /*************************************************************************************************************
     *                                                  Command Line
     *************************************************************************************************************/

    /*************************************************************************************************************
     *                                                  Watch Options
     *************************************************************************************************************/
    "assumeChangesOnlyAffectDirectDependencies": true,
  },

  /*************************************************************************************************************
   *                                                  Watch Options
   *************************************************************************************************************/
  "watchOptions": {
    "watchFile": "useFsEvents",                          /* Specify the strategy for watching individual files. */
    "watchDirectory": "useFsEvents",                     /* Specify the strategy for watching directories under systems that lack recursive file-watching functionality. */
    "fallbackPolling": "dynamicPriority",                /* Specify the polling strategy to use when the system runs out of or doesn't support native file watchers. */
    "synchronousWatchDirectory": false,
    "excludeDirectories": [],
    "excludeFiles": [],
  },

  /*************************************************************************************************************
   *                                                  Type Acquisition
   *************************************************************************************************************/
  "typeAcquisition": {
    "enable": false,
    "include": [],
    "exclude": [],
    "disableFilenameBasedTypeAcquisition": true
  },
  "include": [
    /**
     * 如果开启了 allowJS 且源文件中包含 .js 文件，则必需开启 emitDeclarationOnly 或者将 outDir 设置为其它目录
     * 如果源文件中还包含 .js 文件对应的 .d.ts，还需要将 declarationDir 设置为其它目录
     * 这样 tsconfig.json 就不会报错，但实际上 outDir 和 declarationDir 我们都是不需要的，
     * 因为 tsconfig.json 中的选项只用于 ts-loader transpile 和给编辑器看，
     * .d.ts 和 .js 的生成使用 typescript compile API 自定义
     */
    "src/**/*.ts"
  ],
  "exclude": [
    "node_modules",
    "dist",
    "build",
    "dev",
    "release"
  ]
}
